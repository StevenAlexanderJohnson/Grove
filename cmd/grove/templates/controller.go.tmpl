package controllers

import (
    "net/http"
    "{{.ProjectName}}/internal/models"
    "{{.ProjectName}}/internal/services"
)

type {{.ResourceName}}Controller struct {
    service *services.{{.ResourceName}}Service
}

func New{{.ResourceName}}Controller(service *services.{{.ResourceName}}Service) *{{.ResourceName}}Controller {
    return &{{.ResourceName}}Controller{
        service: service,
    }
}

func (c *{{.ResourceName}}Controller) RegisterRoutes(mux *http.ServeMux) {
    mux.HandleFunc("POST", "/{{.ResourceName}}", c.Create)
    mux.HandleFunc("GET", "/{{.ResourceName}}", c.GetAll)
    mux.HandleFunc("GET", "/{{.ResourceName}}/{id}", c.GetByID)
    mux.HandleFunc("PUT", "/{{.ResourceName}}/{id}", c.Update)
    mux.HandleFunc("DELETE", "/{{.ResourceName}}/{id}", c.Delete)
}

func (c *{{.ResourceName}}Controller) Create(w http.ResponseWriter, r *http.Request) {
    data, err := grove.ParseJsonBodyFromRequest[*models.{{.ResourceName}}](r)
    if err != nil {
        grove.WriteErrorToResponse(w, http.StatusBadRequest, err.Error())
        return
    }
    newData, err := c.service.Create(data)
    if err != nil {
        grove.WriteErrorToResponse(w, http.StatusInternalServerError, err.Error())
        return
    }
    if err := grove.WriteJsonBodyToResponse(w, newData); err != nil {
        grove.WriteErrorToResponse(w, http.StatusInternalServerError, err.Error())
        return
    }
}

func (c *{{.ResourceName}}Controller) GetAll(w http.ResponseWriter, r *http.Request) {
    items, err := c.service.List()
    if err != nil {
        grove.WriteErrorToResponse(w, http.StatusInternalServerError, err.Error())
        return
    }
    if err := grove.WriteJsonBodyToResponse(w, items); err != nil {
        grove.WriteErrorToResponse(w, http.StatusInternalServerError, err.Error())
        return
    }
}

func (c *{{.ResourceName}}Controller) GetByID(w http.ResponseWriter, r *http.Request) {
    id := r.PathValue("id")
    if id == "" {
        grove.WriteErrorToResponse(w, http.StatusBadRequest, "ID is required")
        return
    }
    id, err := strconv.Atoi(id)
    if err != nil {
        grove.WriteErrorToResponse(w, http.StatusBadRequest, "Invalid ID format")
        return
    }

    item, err := c.service.Get(id)
    if err != nil {
        grove.WriteErrorToResponse(w, http.StatusInternalServerError, err.Error())
        return
    }
    if item == nil {
        grove.WriteErrorToResponse(w, http.StatusNotFound, "Item not found")
        return
    }
    if err := grove.WriteJsonBodyToResponse(w, item); err != nil {
        grove.WriteErrorToResponse(w, http.StatusInternalServerError, err.Error())
        return
    }
}

func (c *{{.ResourceName}}Controller) Update(w http.ResponseWriter, r *http.Request) {
    id := r.PathValue("id")
    if id == "" {
        grove.WriteErrorToResponse(w, http.StatusBadRequest, "ID is required")
        return
    }
    id, err := strconv.Atoi(id)
    if err != nil {
        grove.WriteErrorToResponse(w, http.StatusBadRequest, "Invalid ID format")
        return
    }

    data, err := grove.ParseJsonBodyFromRequest[*models.{{.ResourceName}}](r)
    if err != nil {
        grove.WriteErrorToResponse(w, http.StatusBadRequest, err.Error())
        return
    }
    updatedData, err := c.service.Update(data, id)
    if err != nil {
        return nil, err
    }
    return updatedData, nil
}

func (c *{{.ResourceName}}Controller) Delete(w http.ResponseWriter, r *http.Request) {
    idString := r.PathValue("id")
    if idString == "" {
        grove.WriteErrorToResponse(w, http.StatusBadRequest, "ID is required")
        return
    }

    id, err := strconv.Atoi(idString)
    if err != nil {
        grove.WriteErrorToResponse(w, http.StatusBadRequest, "Invalid ID format")
        return
    }

    if err := c.service.Delete(id); err != nil {
        grove.WriteErrorToResponse(w, http.StatusInternalServerError, err.Error())
        return
    }
    grove.WriteJsonBodyToResponse(w, nil)
}